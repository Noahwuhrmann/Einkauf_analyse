#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Wed Dec  4 01:13:05 2024@author: noahwuhrmann"""# Verison 3import pandas as pdimport streamlit as stimport reimport io# Streamlit Appst.title("Excel Sortier- und Exporttool")# Dateiuploaduploaded_file = st.file_uploader("Bitte eine Excel-Datei hochladen", type=["xlsx"])if uploaded_file:    # Mitteilung über erfolgreichen Upload    st.success("Die Datei wurde erfolgreich hochgeladen.")        # Datei in einen DataFrame laden    try:        df = pd.read_excel(uploaded_file, engine='openpyxl')                # Spaltennamen definieren        fixed_columns = ["Bestand", "Artikelname", "KatalogNr", "Artikel", "Artikelgruppe", "Netto"]                # Dynamische Spalten identifizieren        current_year = pd.Timestamp.now().year        last_year = current_year - 1                # Jahr-Spalten        year_columns = [str(current_year), str(last_year)]                # Monatsspalten erkennen        month_columns = []        month_pattern = re.compile(r"(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s?\d{4}")        for col in df.columns:            if month_pattern.match(col):                month_columns.append(col)                # Monatsspalten sortieren: Zuerst aktuelles Jahr, dann vergangenes Jahr, danach Monate        def month_key(col_name):            match = re.match(r"(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s?(\d{4})", col_name)            if match:                month_str, year_str = match.groups()                year = int(year_str)                month = pd.to_datetime(month_str, format='%b').month                return (year, month)            return (0, 0)  # Fallback für unerkannte Spalten                month_columns.sort(key=month_key, reverse=True)                # Zielspalten in der richtigen Reihenfolge        target_columns = fixed_columns + year_columns + month_columns                # Nur die Spalten im neuen DataFrame behalten        filtered_df = df[[col for col in target_columns if col in df.columns]]                # Nutzer auffordern, den Dateinamen anzugeben        output_filename = st.text_input("Bitte geben Sie einen Namen für die exportierte Datei ein (ohne .xlsx):", value="Exportierte_Datei")                if st.button("Excel-Datei exportieren"):            # Excel-Datei speichern            output = io.BytesIO()            with pd.ExcelWriter(output, engine='openpyxl') as writer:                filtered_df.to
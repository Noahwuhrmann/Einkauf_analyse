#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Wed Dec  4 01:13:05 2024@author: noahwuhrmann"""# V12import pandas as pdimport streamlit as stimport refrom openpyxl import load_workbookfrom openpyxl.utils import get_column_letter# Streamlit Appst.title("Excel Sortier- und Exporttool")# Dateiuploaduploaded_file = st.file_uploader("Bitte eine Excel-Datei hochladen", type=["xlsx"])if uploaded_file:    st.success("Die Datei wurde erfolgreich hochgeladen.")    try:        df = pd.read_excel(uploaded_file, engine="openpyxl")                # Relevante Spalten definieren        fixed_columns = ["Bestand", "Artikelname", "Artikelgruppe", "KatalogNr", "Artikel"]                # Monatsspalten erkennen        month_pattern = re.compile(r"(Jan|Feb|Mär|Apr|Mai|Jun|Jul|Aug|Sep|Okt|Nov|Dez)\s\d{4}")        month_columns = [col for col in df.columns if month_pattern.match(col)]                # Jahres-Spalten (zwei Jahre mit vierstelligen Zahlen)        year_pattern = re.compile(r"^\d{4}$")        year_columns = [col for col in df.columns if year_pattern.match(col)]                # Spalten in der gewünschten Reihenfolge        target_columns = fixed_columns + year_columns + month_columns + ["Netto"]        target_columns = [col for col in target_columns if col in df.columns]  # Nur vorhandene Spalten behalten                # DataFrame filtern        filtered_df = df[target_columns]                # Zeilen mit Bedingungen entfernen        month_data = filtered_df[month_columns]        filtered_df = filtered_df[~((filtered_df["Bestand"] == 0) & (month_data.sum(axis=1) == 0))]                # Nutzerinput für Dateinamen        output_filename = st.text_input("Bitte geben Sie einen Namen für die exportierte Datei ein (ohne .xlsx):", value="Exportierte_Datei")        if st.button("Excel-Datei exportieren"):            # Exportieren            with pd.ExcelWriter(f"{output_filename}.xlsx", engine="openpyxl") as writer:                filtered_df.to_excel(writer, index=False, sheet_name="Export")                                # Automatische Spaltenbreite anpassen                workbook = writer.book                worksheet = writer.sheets["Export"]                for column_idx, column_cells in enumerate(worksheet.columns, start=1):                    max_length = 0                    for cell in column_cells:                        try:                            max_length = max(max_length, len(str(cell.value)))                        except:                            pass                    adjusted_width = max_length + 2  # Puffer für Lesbarkeit                    worksheet.column_dimensions[get_column_letter(column_idx)].width = adjusted_width                        st.success(f"Die Datei '{output_filename}.xlsx' wurde erfolgreich erstellt und ist bereit zum Herunterladen.")            with open(f"{output_filename}.xlsx", "rb") as file:                st.download_button(                    label="Herunterladen",                    data=file,                    file_name=f"{output_filename}.xlsx",                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"                )    except Exception as e:        st.error(f"Ein Fehler ist aufgetreten: {e}")
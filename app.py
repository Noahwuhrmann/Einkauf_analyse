#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Wed Dec  4 01:13:05 2024@author: noahwuhrmann"""# V11import pandas as pdimport streamlit as stimport reimport io# Streamlit Appst.title("Excel Sortier- und Exporttool")# Dateiuploaduploaded_file = st.file_uploader("Bitte eine Excel-Datei hochladen", type=["xlsx"])if uploaded_file:    # Mitteilung über erfolgreichen Upload    st.success("Die Datei wurde erfolgreich hochgeladen.")        # Datei in einen DataFrame laden    try:        df = pd.read_excel(uploaded_file, engine='openpyxl')                # Fixe Spalten definieren        fixed_columns = ["Bestand", "Artikelname", "Artikelgruppe", "KatalogNr", "Artikel"]                # Monatsspalten auf Deutsch erkennen        month_pattern = re.compile(r"(Jan|Feb|Mär|Apr|Mai|Jun|Jul|Aug|Sep|Okt|Nov|Dez) \d{4}")        month_columns = [col for col in df.columns if month_pattern.match(col)]                # Jahresspalten erkennen (z. B. 2024, 2023, ...)        year_pattern = re.compile(r"^\d{4}$")        year_columns = [col for col in df.columns if year_pattern.match(str(col))]                # Spalte "Netto" an das Ende verschieben        all_columns = fixed_columns + year_columns + month_columns        all_columns = [col for col in all_columns if col in df.columns]  # Nur existierende Spalten beibehalten        if "Netto" in df.columns:            all_columns = [col for col in all_columns if col != "Netto"] + ["Netto"]  # "Netto" an das Ende setzen                # Zeilen filtern: Bedingungen für irrelevante Produkte        relevant_rows = ~(            (df["Bestand"] == 0) &             (df[month_columns].sum(axis=1) == 0)  # Summe der Monatswerte prüfen        )        filtered_df = df.loc[relevant_rows, all_columns]                # Nutzer auffordern, den Dateinamen anzugeben        output_filename = st.text_input("Bitte geben Sie einen Namen für die exportierte Datei ein (ohne .xlsx):", value="Exportierte_Datei")                if st.button("Excel-Datei exportieren"):            # Excel-Datei in Bytes speichern            output = io.BytesIO()            with pd.ExcelWriter(output, engine='openpyxl') as writer:                filtered_df.to_excel(writer, index=False, sheet_name="Export")            output.seek(0)                        # Download-Button            st.download_button(                label="Herunterladen",                data=output,                file_name=f"{output_filename}.xlsx",                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"            )            st.success(f"Die Datei '{output_filename}.xlsx' wurde erfolgreich erstellt und ist bereit zum Herunterladen.")    except Exception as e:        st.error(f"Ein Fehler ist aufgetreten: {e}")
#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Wed Dec  4 2024@author: Noah Wuhrmann"""#v16import pandas as pdimport streamlit as stimport openpyxlfrom openpyxl.styles import Alignment, Font, PatternFillfrom openpyxl.styles.numbers import FORMAT_NUMBER_COMMA_SEPARATED1import ioimport re# App Titlest.title("Einkaufsanalyse – Taurus Sports AG")# Upload Image Headerst.image("absolut_bild.jpeg", use_container_width=True)# File Upload Sectionuploaded_file = st.file_uploader("Bitte eine Excel-Datei hochladen", type=["xlsx"])if uploaded_file:    try:        # Read uploaded Excel file        df = pd.read_excel(uploaded_file, engine='openpyxl')        # DataFrame cleaning and filtering logic here (not included for brevity)        # ...        # Output filename        output_filename = st.text_input("Bitte geben Sie einen Namen für die exportierte Datei ein (ohne .xlsx):", value="Einkaufsanalyse")        output_filename = re.sub(r'[<>:"/\\|?*]', "", output_filename).strip()        if not output_filename:            st.warning("Bitte einen gültigen Dateinamen eingeben.")        else:            # Export button            if st.button("Excel-Datei exportieren"):                output = io.BytesIO()                with pd.ExcelWriter(output, engine='openpyxl') as writer:                    df.to_excel(writer, index=False, sheet_name="Export")                    workbook = writer.book                    sheet = writer.sheets["Export"]                    # Adjust formatting                    header_font = Font(bold=True, size=11, name="Calibri")                    header_fill = PatternFill("solid", fgColor="D9D9D9")                    left_align = Alignment(horizontal="left", vertical="center")                    right_align = Alignment(horizontal="right", vertical="center")                    # Apply formatting to the header row                    for cell in sheet[1]:                        cell.font = header_font                        cell.fill = header_fill                        cell.alignment = Alignment(horizontal="center", vertical="center")                    # Format specific columns                    for col in sheet.columns:                        max_length = 0                        column = col[0].column_letter  # Get column name                        for cell in col:                            try:                                if cell.value:                                    max_length = max(max_length, len(str(cell.value)))                            except:                                pass                        adjusted_width = max_length + 2                        sheet.column_dimensions[column].width = adjusted_width                    # Specific alignments                    for cell in sheet["A"]:  # "Bestand" column                        cell.alignment = left_align                    for cell in sheet["C"]:  # "KatalogNr" column                        cell.alignment = left_align                    # Highlight negative numbers in red                    red_text = Font(color="FF0000")                    netto_col = None                    for col in sheet.iter_cols(1, sheet.max_column):                        if col[0].value == "Netto":                            netto_col = col                            break                    if netto_col:                        for cell in netto_col:                            if isinstance(cell.value, (int, float)):                                if cell.value < 0:                                    cell.font = red_text                                cell.number_format = FORMAT_NUMBER_COMMA_SEPARATED1                    else:                        st.warning("Die Spalte 'Netto' wurde nicht gefunden.")                output.seek(0)                st.download_button(                    label="Herunterladen",                    data=output,                    file_name=f"{output_filename}.xlsx",                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",                )    except Exception as e:        st.error(f"Ein Fehler ist aufgetreten: {e}")